name: Publish CLI
on:
  workflow_dispatch:
    inputs:
      post:
        name: "Release Post"
        required: true
        description: Choose the release post to publish with. Must be a tag (eg v0.4.0)
        type: string
      channel:
        name: "CLI Binary Version"
        required: true
        description: Choose the version number to publish with. Must be a tag (ie v0.4.0)
        type: string

env:
  # make sure we have the right version
  # main is always a prepatch until we hit 1.0, and then this script needs to be updated
  # note that we need to promote the prepatch to a minor bump when we actually do a release
  # this means the version in git will always be one minor bump ahead of the actual release - basically meaning once
  # we release a version, it's fair game to merge breaking changes to main since all semver-compatible changes will be
  # backported automatically
  # SEMVER: ${{ github.event.inputs.channel == 'main' && 'prerelease' || 'patch' }}
  # PRERELEASE_TAG: ${{ github.event.inputs.channel == 'main' && '-pre' || '' }}
  RELEASE_TAG: ${{ github.event.inputs.channel }}
  RELEASE_POST: ${{ github.event.inputs.post }}

jobs:
  release-cli:
    permissions:
      contents: write
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          # - target: aarch64-pc-windows-msvc
          #   os: windows-latest
          # - target: x86_64-apple-darwin
          #   os: macos-13
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install openssl on macos
        if: matrix.platform.os == 'macos-latest'
        run: brew install openssl

      - name: Install nasm for windows (tls)
        if: ${{ matrix.platform.target == 'x86_64-pc-windows-msvc' }}
        uses: ilammy/setup-nasm@v1

      - name: Install stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.84.0"
          targets: ${{ matrix.platform.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with: # speed things up a bit
          large-packages: false
          docker-images: false
          swap-storage: false

      # Todo: we want `cargo install dx` to actually just use a prebuilt binary instead of building it
      - name: Build and upload CLI binaries
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: dx
          token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ matrix.platform.target }}
          archive: $bin-$target-${{ env.RELEASE_TAG }}
          checksum: sha256
          manifest_path: packages/cli/Cargo.toml
          ref: refs/tags/${{ env.RELEASE_POST }}
          features: optimizations
